// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package tripletsvc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// TripletServiceClient is the client API for TripletService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type TripletServiceClient interface {
	// Compute the top 100 triplet of a []byte
	Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error)
}

type tripletServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewTripletServiceClient(cc grpc.ClientConnInterface) TripletServiceClient {
	return &tripletServiceClient{cc}
}

func (c *tripletServiceClient) Compute(ctx context.Context, in *ComputeRequest, opts ...grpc.CallOption) (*ComputeResponse, error) {
	out := new(ComputeResponse)
	err := c.cc.Invoke(ctx, "/TripletService/Compute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// TripletServiceServer is the server API for TripletService service.
// All implementations should embed UnimplementedTripletServiceServer
// for forward compatibility
type TripletServiceServer interface {
	// Compute the top 100 triplet of a []byte
	Compute(context.Context, *ComputeRequest) (*ComputeResponse, error)
}

// UnimplementedTripletServiceServer should be embedded to have forward compatible implementations.
type UnimplementedTripletServiceServer struct {
}

func (UnimplementedTripletServiceServer) Compute(context.Context, *ComputeRequest) (*ComputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Compute not implemented")
}

// UnsafeTripletServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to TripletServiceServer will
// result in compilation errors.
type UnsafeTripletServiceServer interface {
	mustEmbedUnimplementedTripletServiceServer()
}

func RegisterTripletServiceServer(s grpc.ServiceRegistrar, srv TripletServiceServer) {
	s.RegisterService(&TripletService_ServiceDesc, srv)
}

func _TripletService_Compute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ComputeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(TripletServiceServer).Compute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/TripletService/Compute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(TripletServiceServer).Compute(ctx, req.(*ComputeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// TripletService_ServiceDesc is the grpc.ServiceDesc for TripletService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var TripletService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "TripletService",
	HandlerType: (*TripletServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Compute",
			Handler:    _TripletService_Compute_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "service.proto",
}
